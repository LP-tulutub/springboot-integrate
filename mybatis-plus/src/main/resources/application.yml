server:
  port: 10025
spring:
  application:
    name: mybatis-plus
  datasource: # 连接数据库配置
    url: jdbc:mysql://localhost:3306/mp?characterEncoding=utf-8&useSSL=true&serverTimezone=GMT%2b8&useUnicode=true
    username: root
    password: A18716296148
    driver-class-name: com.mysql.cj.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource # com.zaxxer.hikari.HikariDataSource
    druid: # druid 连接池配置
      initial-size: 5 # 初始化大小，最大
      min-idle: 10 # 最小
      max-active: 20 # 最大
      max-wait: 60000 # 配置获取连接等待超时的时间
      time-between-eviction-runs-millis: 20000 # # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位毫秒
      max-evictable-idle-time-millis: 900000 # 配置一个连接在池中最大生存时间
      min-evictable-idle-time-millis: 600000 # 配置一个连接在池中最小生存时间
      validation-query: SELECT 1 # 用来检测连接是否有效的 sql，要求是一个查询语句，常用 select 'x'。如果 validationQuery 为 null，testOnBorrow、testOnReturn、testWhileIdle 都不会起作用
      validation-query-timeout: 60 # 单位:秒，检测连接是否有效的超时时间
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      keep-alive: true # 连接阿里云 AnalyticDB(关系型数据库)、Data Lake Analytics(数据湖分析)
      phy-max-use-count: 1000 # 最大连接数
      pool-prepared-statements: true # 打开 PSCache，并且指定每个连接上 PSCache 的大小
      max-pool-prepared-statement-per-connection-size: 20 # 打开 PSCache，并且指定每个连接上 PSCache 的大小
      #max-open-prepared-statements: 20 # 和上面的等价
      #share-prepared-statements:
      connection-properties: druid.stat.mergeSql=true;druid.stat.logSlowSql=true;druid.stat.slowSqlMillis=5000 # 通过 connection-properties 属性打开 mergeSql 功能；慢 SQL 记录
      remove-abandoned: false # 连接泄漏监测打开(removeAbandoned 功能)，可以在内置监控界面 datasource.html 中的查看 ActiveConnection StackTrace 属性的，可以看到未关闭连接的具体堆栈信息，从而方便查出哪些连接泄漏了
      remove-abandoned-timeout: 1800 # 1800 秒，也就是 30 分钟
      log-abandoned: true # 关闭 abanded 连接时输出错误日志
      use-global-data-source-stat: true # 合并多个 DruidDataSource 的监控数据
      #time-between-log-stats-millis: 300000 # 保存 DruidDataSource 的监控记录，设置值 >0 生效
      #stat-logger: # 与上面一条一起使用
      #aop-patterns: # Spring 监控 AOP 切入点，如 x.y.z.service.*, 配置多个英文逗号分隔
      web-stat-filter:
        enabled: true
        url-pattern: /*
        exclusions: .js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*
        session-stat-enable: false # session 统计功能
        session-stat-max-count: 1000 # 缺省 sessionStatMaxCount 是 1000 个
        #principal-session-name: xxx.user # 可以配置 principalSessionName，使得 druid 能够知道当前的 session 的用户是谁
        #principal-cookie-name: xxx.user # 如果 user 信息保存在 cookie 中，你可以配置 principalCookieName，使得 druid 知道当前的 user 是谁
        profile-enable: true # 配置 profileEnable 能够监控单个url调用的sql列表
      stat-view-servlet:
        enabled: true
        url-pattern: /druid/*
        allow: 127.0.0.1 # IP 白名单，没有配置或者为空，则允许所有访问
        deny: 192.168.31.253 # IP 黑名单，若白名单也存在，则此优先使用
        reset-enable: false # # 禁用 HTML 中 Reset All 按钮
        login-username: root # 登录用户名/密码
        login-password: 123456 # 登录用户名/密码
      filters: stat,wall # 配置监控统计拦截的 filters
      filter:
        stat:
          enabled: true # 配置 StatFilter 开启
          db-type: mysql # mysql 有效
          log-slow-sql: true # 开启慢 SQL 检测
          slow-sql-millis: 2000 # 慢 SQL 超过这个时间日志输出 ERROR(不会报错，只是一个错误日志)
        wall:
          enabled: true # filter 拦截开启
          db-type: mysql # mysql 有效
          log-violation: false # 对被认为是攻击的 SQL 进行 LOG.error 输出
          throw-exception: true # 对被认为是攻击的 SQL 抛出 SQLException
          config:
            select-all-column-allow: true # 是否允许执行SELECT * FROM T这样的语句
            select-into-allow: true # SELECT 查询中是否允许 INTO 字句
            delete-allow: true # 是否允许执行 DELETE 语句
            update-allow: true # 是否允许执行 UPDATE 语句
            insert-allow: true # 是否允许执行 INSERT 语句
            replace-allow: true # 是否允许执行 REPLACE 语句
            merge-allow: true # 是否允许执行 MERGE 语句，这个只在 Oracle 中有用
            call-allow: true # 是否允许通过 jdbc 的 call 语法调用存储过程
            set-allow: true # 是否允许使用 SET 语法
            truncate-allow: true # truncate 语句是危险，缺省打开，若需要自行关闭
            create-table-allow: true # 是否允许创建表
            alter-table-allow: true # 是否允许执行 Alter Table 语句
            drop-table-allow: true # 是否允许修改表
            comment-allow: false # 是否允许语句中存在注释，Oracle 的用户不用担心，Wall 能够识别 hints 和注释的区别
            none-base-statement-allow: false # 是否允许非以上基本语句的其他语句，缺省关闭，通过这个选项就能够屏蔽 DDL
            multi-statement-allow: false # 是否允许一次执行多条语句，缺省关闭
            use-allow: true # 是否允许执行 mysql 的 use 语句，缺省打开
            describe-allow: true # 是否允许执行 mysql 的 describe 语句，缺省打开
            show-allow: true # 是否允许执行 mysql 的 show 语句，缺省打开
            commit-allow: true # 是否允许执行 commit 操作
            rollback-allow: true # 是否允许执行 roll back 操作
            select-where-alway-true-check: true # 检查 SELECT 语句的 WHERE 子句是否是一个永真条件
            select-having-alway-true-check: true # 检查 SELECT 语句的 HAVING 子句是否是一个永真条件
            delete-where-alway-true-check: true # 检查 DELETE 语句的 WHERE 子句是否是一个永真条件
            delete-where-none-check: false # 检查 DELETE 语句是否无 where 条件，这是有风险的，但不是 SQL 注入类型的风险
            update-where-alay-true-check: true # 检查 UPDATE 语句的 WHERE 子句是否是一个永真条件
            condition-and-alway-true-allow: false # 检查查询条件(WHERE/HAVING 子句)中是否包含 AND 永真条件
            condition-and-alway-false-allow: false # 检查查询条件(WHERE/HAVING 子句)中是否包含 AND 永假条件
            condition-like-true-allow: true # 检查查询条件(WHERE/HAVING 子句)中是否包含 LIKE 永真条件
            select-into-outfile-allow: false # SELECT ... INTO OUTFILE 是否允许，这个是mysql注入攻击的常见手段，缺省是禁止的
            select-union-check: true # 检测 SELECT UNION
            select-minus-check: true # 检测 SELECT MINUS
            select-except-check: true # 检测 SELECT EXCEPT
            select-intersect-check: true # 检测 SELECT INTERSECT
            must-parameterized: false # 是否必须参数化，如果为 True，则不允许类似 WHERE ID = 1 这种不参数化的 SQL
            strict-syntax-check: true # 是否进行严格的语法检测，Druid SQL Parser 在某些场景不能覆盖所有的 SQL 语法，出现解析 SQL 出错，可以临时把这个选项设置为 false，同时把 SQL 反馈给 Druid 的开发者
            condition-op-xor-allow: false # 查询条件中是否允许有 XOR 条件。XOR 不常用，很难判断永真或者永假，缺省不允许
            condition-op-bitwse-allow: true # 查询条件中是否允许有"&"、"~"、"|"、"^"运算符
            condition-double-const-allow: false # 查询条件中是否允许连续两个常量运算表达式
            minus-allow: true # 是否允许 SELECT * FROM A MINUS SELECT * FROM B 这样的语句
            intersect-allow: true # 是否允许 SELECT * FROM A INTERSECT SELECT * FROM B 这样的语句
            const-arithmetic-allow: true # 拦截常量运算的条件，比如说 WHERE FID = 3 - 1，其中 "3 - 1" 是常量运算表达式
            limit-zero-allow: false # 是否允许 limit 0 这样的语句
            select-limit: -1 # 配置最大返回行数，如果 select 语句没有指定最大返回行数，会自动修改 select 添加返回限制
            table-check: true # 检测是否使用了禁用的表
            schema-check: true # 检测是否使用了禁用的 Schema
            function-check: true # 检测是否使用了禁用的函数
            object-check: true # 检测是否使用了“禁用对对象”
            variant-check: true # 	检测是否使用了“禁用的变量”
            read-only-tables: # 指定的表只读，不能够在 SELECT INTO、DELETE、UPDATE、INSERT、MERGE 中作为"被修改表"出现
            metadata-allow: true # 是否允许调用 Connection.getMetadata 方法，这个方法调用会暴露数据库的表信息
            wrap-allow: true # 是否允许调用 Connection/Statement/ResultSet 的 isWrapFor 和 unwrap 方法，这两个方法调用，使得有办法拿到原生驱动的对象，绕过 WallFilter 的检测直接执行SQL
mybatis-plus: # mybatis-plus 配置
  type-handlers-package: # TypeHandler 扫描路径，如果配置了该属性，SqlSessionFactoryBean 会把该包下面的类注册为对应的 TypeHandler
  configuration:
    map-underscore-to-camel-case: true # 是否开启自动驼峰命名规则
    auto-mapping-behavior: full # 默认值 partial = 只对非嵌套的 resultMap 进行自动映射，MyBatis 自动映射策略，通过该配置可指定 MyBatis 是否并且如何来自动映射数据表字段与对象的属性
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    default-enum-type-handler: org.apache.ibatis.type.EnumTypeHandler # 默认枚举处理类，如果配置了该属性，枚举将统一使用指定处理器进行处理
    aggressive-lazy-loading: true # 当设置为 true 的时候，懒加载的对象可能被任何懒属性全部加载，否则，每个属性都按需加载
    lazy-loading-enabled: true # 与上面一条同时使用
    auto-mapping-unknown-column-behavior: none # 默认值 none = 不做任何处理，MyBatis 自动映射时未知列或未知属性处理策略，通过该配置可指定 MyBatis 在自动映射过程中遇到未知
    local-cache-scope: session # 默认值 session = 同一个 session 相同查询语句不会再次查询数据库，Mybatis 一级缓存
    cache-enabled: false # 默认为 true，开启 Mybatis 二级缓存
    call-setters-on-nulls: false # 默认为 false，指定当结果集中值为 null 的时候是否调用映射对象的 Setter
    configuration-factory:  # 默认为空，指定一个提供 Configuration 实例的工厂类。该工厂生产的实例将用来加载已经被反序列化对象的懒加载属性值，其必须包含一个签名方法static Configuration getConfiguration()
  mapper-locations: classpath*:mapper/*Mapper.xml
  global-config:
    banner: true # 是否控制台 print mybatis-plus 的 LOGO
    enable-sql-runner: false # 是否初始化 SqlRunner(com.baomidou.mybatisplus.extension.toolkit.SqlRunner)
    #sql-session-factory: org.apache.ibatis.session.SqlSessionFactory #
    super-mapper-class: com.baomidou.mybatisplus.core.mapper.Mapper # 通用 Mapper 父类
    db-config: # 逻辑删除配置
      id-type: input # 全局默认主键类型
      table-prefix: # 表名前缀
      schema: # 数据库
      column-format: # 字段 format
      table-underline: true # 表名是否使用驼峰转下划线命名，只对表名生效
      #logic-delete-field: flag # 全局逻辑删除的实体字段名
      capital-mode: false # 大写命名，对表名和字段名均生效
      logic-delete-field: # 全局的 entity 的逻辑删除字段属性名，逻辑删除下有效
      logic-not-delete-value: 0 # 删除前
      logic-delete-value: 1 # 删除后
      insert-strategy: not_null # 字段验证策略之 insert,在 insert 的时候的字段验证策略
      update-strategy: not_null # 字段验证策略之 update,在 update 的时候的字段验证策略
      select-strategy: not_null # 字段验证策略之 select,在 select 的时候的字段验证策略，既 wrapper 根据内部 entity 生成的 where 条件

